{"version":3,"file":"9970.b8f5d099d1d56c5b250e.js","mappings":"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","sources":["webpack://telegram-t/./src/components/right/DeleteMemberModal.tsx","webpack://telegram-t/./src/global/actions/api/chats.ts","webpack://telegram-t/./src/global/actions/ui/calls.ts","webpack://telegram-t/./src/global/reducers/calls.ts"],"sourcesContent":["import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectCurrentChat, selectUser } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  contactName?: string;\n};\n\nconst DeleteMemberModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chat,\n  userId,\n  contactName,\n  onClose,\n}) => {\n  const { deleteChatMember } = getActions();\n\n  const lang = useLang();\n\n  const handleDeleteChatMember = useCallback(() => {\n    deleteChatMember({ chatId: chat!.id, userId: userId! });\n    onClose();\n  }, [chat, deleteChatMember, onClose, userId]);\n\n  if (!chat || !userId) {\n    return undefined;\n  }\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('GroupRemoved.Remove')}\n      textParts={renderText(lang('PeerInfo.Confirm.RemovePeer', contactName))}\n      confirmLabel={lang('lng_box_remove')}\n      confirmHandler={handleDeleteChatMember}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const chat = selectCurrentChat(global);\n    const user = userId && selectUser(global, userId);\n    const contactName = user ? getUserFirstOrLastName(user) : undefined;\n\n    return {\n      chat,\n      contactName,\n    };\n  },\n)(DeleteMemberModal));\n","import type {\n  ApiChat, ApiChatFolder, ApiChatlistExportedInvite,\n  ApiChatMember, ApiError, ApiUser,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ChatListType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport {\n  ChatCreationProgress,\n  ManagementProgress,\n  NewChatMembersProgress,\n  SettingsScreens,\n  type ThreadId,\n} from '../../../types';\n\nimport {\n  ALL_FOLDER_ID,\n  ARCHIVED_FOLDER_ID,\n  CHAT_LIST_LOAD_SLICE,\n  DEBUG,\n  RE_TG_LINK,\n  SAVED_FOLDER_ID,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TME_WEB_DOMAINS,\n  TMP_CHAT_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  TOPICS_SLICE,\n  TOPICS_SLICE_SECOND_LOAD,\n} from '../../../config';\nimport { formatShareText, parseChooseParameter, processDeepLink } from '../../../util/deeplink';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport { buildCollectionByKey, omit, pick } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  isChatArchived,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isLocalMessageId,\n  isUserBot,\n  toChannelId,\n} from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMembers,\n  addChats,\n  addMessages,\n  addSimilarChannels,\n  addUsers,\n  addUserStatuses,\n  addUsersToRestrictedInviteList,\n  deleteChatMessages,\n  deleteTopic,\n  leaveChat,\n  removeChatFromChatLists,\n  replaceChatFullInfo,\n  replaceChatListIds,\n  replaceChats,\n  replaceThreadParam,\n  replaceUsers,\n  replaceUserStatuses,\n  toggleSimilarChannels,\n  updateChat,\n  updateChatFullInfo,\n  updateChatLastMessageId,\n  updateChatListIds,\n  updateChatListSecondaryInfo,\n  updateChats,\n  updateChatsLastMessageId,\n  updateListedTopicIds,\n  updateManagementProgress,\n  updatePeerFullInfo,\n  updateThread,\n  updateThreadInfo,\n  updateTopic,\n  updateTopics,\n  updateUser,\n} from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatByUsername,\n  selectChatFolder,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatLastMessageId,\n  selectChatListType,\n  selectChatMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsChatPinned,\n  selectIsChatWithSelf,\n  selectLastServiceNotification,\n  selectStickerSet,\n  selectSupportChat,\n  selectTabState,\n  selectThread,\n  selectThreadInfo,\n  selectUser,\n  selectUserByPhoneNumber,\n  selectVisibleUsers,\n} from '../../selectors';\nimport { selectGroupCall } from '../../selectors/calls';\nimport { selectCurrentLimit } from '../../selectors/limits';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst SERVICE_NOTIFICATIONS_USER_MOCK: ApiUser = {\n  id: SERVICE_NOTIFICATIONS_USER_ID,\n  accessHash: '0',\n  type: 'userTypeRegular',\n  isMin: true,\n  phoneNumber: '',\n};\nconst CHATLIST_LIMIT_ERROR_LIST = new Set([\n  'FILTERS_TOO_MUCH',\n  'CHATLISTS_TOO_MUCH',\n  'INVITES_TOO_MUCH',\n]);\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('preloadTopChatMessages', async (global, actions): Promise<void> => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    global = getGlobal();\n    const currentChatIds = Object.values(global.byTabId)\n      // eslint-disable-next-line @typescript-eslint/no-loop-func\n      .map(({ id: tabId }) => selectCurrentMessageList(global, tabId)?.chatId)\n      .filter(Boolean);\n\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => !currentChatIds.includes(id) && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID, tabId: getCurrentTabId() });\n  }\n});\n\nfunction abortChatRequests(chatId: string, threadId?: ThreadId) {\n  callApi('abortChatRequests', { chatId, threadId });\n}\n\nfunction abortChatRequestsForCurrentChat<T extends GlobalState>(\n  global: T, newChatId?: string, newThreadId?: ThreadId,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const currentChatId = currentMessageList?.chatId;\n  const currentThreadId = currentMessageList?.threadId;\n\n  if (currentChatId && (currentChatId !== newChatId || currentThreadId !== newThreadId)) {\n    const [isChatOpened, isThreadOpened] = Object.values(global.byTabId)\n      .reduce(([accHasChatOpened, accHasThreadOpened], { id: otherTabId }) => {\n        if (otherTabId === tabId || (accHasChatOpened && accHasThreadOpened)) {\n          return [accHasChatOpened, accHasThreadOpened];\n        }\n\n        const otherMessageList = selectCurrentMessageList(global, otherTabId);\n        const isSameChat = otherMessageList?.chatId === currentChatId;\n        const isSameThread = isSameChat && otherMessageList?.threadId === currentThreadId;\n\n        return [accHasChatOpened || isSameChat, accHasThreadOpened || isSameThread];\n      }, [currentChatId === newChatId, false]);\n\n    const shouldAbortChatRequests = !isChatOpened || !isThreadOpened;\n\n    if (shouldAbortChatRequests) {\n      abortChatRequests(currentChatId, isChatOpened ? currentThreadId : undefined);\n    }\n  }\n}\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id, type, noForumTopicPanel, shouldReplaceHistory, shouldReplaceLast,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  actions.processOpenChatOrThread({\n    chatId: id,\n    type,\n    threadId: MAIN_THREAD_ID,\n    noForumTopicPanel,\n    shouldReplaceHistory,\n    shouldReplaceLast,\n    tabId,\n  });\n\n  abortChatRequestsForCurrentChat(global, id, MAIN_THREAD_ID, tabId);\n\n  if (!id) {\n    return;\n  }\n\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  const isChatOnlySummary = !selectChatLastMessageId(global, id);\n\n  if (!chat) {\n    if (selectIsChatWithSelf(global, id)) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatOnlySummary && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n  actions.closeStoryViewer({ tabId });\n});\n\naddActionHandler('openSavedDialog', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId(), ...otherParams } = payload;\n\n  actions.openThread({\n    chatId: global.currentUserId!,\n    threadId: chatId,\n    tabId,\n    ...otherParams,\n  });\n});\n\naddActionHandler('openThread', async (global, actions, payload): Promise<void> => {\n  const {\n    type, isComments, noForumTopicPanel, shouldReplaceHistory, shouldReplaceLast,\n    focusMessageId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { chatId } = payload;\n  let threadId: ThreadId | undefined;\n  let loadingChatId: string;\n  let loadingThreadId: ThreadId;\n\n  if (!isComments) {\n    loadingChatId = payload.chatId;\n    threadId = payload.threadId;\n    loadingThreadId = threadId;\n\n    const originalChat = selectChat(global, loadingChatId);\n    if (threadId === MAIN_THREAD_ID) {\n      actions.openChat({\n        id: chatId,\n        type,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n        tabId,\n      });\n      return;\n    } else if (originalChat?.isForum || (chatId && getIsSavedDialog(chatId, threadId, global.currentUserId))) {\n      actions.processOpenChatOrThread({\n        chatId,\n        type,\n        threadId,\n        isComments,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n        tabId,\n      });\n      return;\n    }\n  } else {\n    const { originChannelId, originMessageId } = payload;\n\n    loadingChatId = originChannelId;\n    loadingThreadId = originMessageId;\n  }\n\n  const chat = selectChat(global, loadingChatId);\n  const threadInfo = selectThreadInfo(global, loadingChatId, loadingThreadId);\n  const thread = selectThread(global, loadingChatId, loadingThreadId);\n  if (!chat) return;\n\n  abortChatRequestsForCurrentChat(global, loadingChatId, loadingThreadId, tabId);\n\n  if (chatId\n    && threadInfo?.threadId\n    && (isComments || (thread?.listedIds?.length && thread.listedIds.includes(Number(threadInfo.threadId))))) {\n    global = updateTabState(global, {\n      loadingThread: undefined,\n    }, tabId);\n    setGlobal(global);\n    actions.processOpenChatOrThread({\n      chatId,\n      type,\n      threadId: threadInfo.threadId,\n      isComments,\n      noForumTopicPanel,\n      shouldReplaceHistory,\n      shouldReplaceLast,\n      tabId,\n    });\n    return;\n  }\n\n  let { loadingThread } = selectTabState(global, tabId);\n  if (loadingThread) {\n    abortChatRequests(loadingThread.loadingChatId, loadingThread.loadingMessageId);\n  }\n\n  global = updateTabState(global, {\n    loadingThread: {\n      loadingChatId,\n      loadingMessageId: Number(loadingThreadId),\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const openPreviousChat = () => {\n    // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n    const currentGlobal = getGlobal();\n    if (isComments\n      || selectCurrentMessageList(currentGlobal, tabId)?.chatId !== loadingChatId\n      || selectCurrentMessageList(currentGlobal, tabId)?.threadId !== loadingThreadId) {\n      return;\n    }\n    actions.openPreviousChat({ tabId });\n  };\n\n  if (!isComments) {\n    actions.processOpenChatOrThread({\n      chatId,\n      type,\n      threadId: threadId!,\n      tabId,\n      isComments,\n      noForumTopicPanel,\n      shouldReplaceHistory,\n      shouldReplaceLast,\n    });\n  }\n\n  const result = await callApi('fetchDiscussionMessage', {\n    chat: selectChat(global, loadingChatId)!,\n    messageId: Number(loadingThreadId),\n  });\n\n  global = getGlobal();\n  loadingThread = selectTabState(global, tabId).loadingThread;\n  if (loadingThread?.loadingChatId !== loadingChatId || loadingThread?.loadingMessageId !== loadingThreadId) {\n    openPreviousChat();\n    return;\n  }\n\n  if (!result) {\n    global = updateTabState(global, {\n      loadingThread: undefined,\n    }, tabId);\n    setGlobal(global);\n\n    actions.showNotification({\n      message: langProvider.translate(isComments ? 'ChannelPostDeleted' : 'lng_message_not_found'),\n      tabId,\n    });\n\n    openPreviousChat();\n    return;\n  }\n\n  threadId ??= result.threadId;\n  chatId ??= result.chatId;\n\n  if (!chatId) {\n    openPreviousChat();\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  if (isComments) {\n    global = updateThreadInfo(global, loadingChatId, loadingThreadId, {\n      threadId,\n    });\n\n    global = updateThreadInfo(global, chatId, threadId, {\n      isCommentsInfo: false,\n      threadId,\n      chatId,\n      fromChannelId: loadingChatId,\n      fromMessageId: loadingThreadId,\n      ...(threadInfo\n        && pick(threadInfo, ['messagesCount', 'lastMessageId', 'lastReadInboxMessageId', 'recentReplierIds'])),\n    });\n  }\n  global = updateThread(global, chatId, threadId, {\n    firstMessageId: result.firstMessageId,\n  });\n  setGlobal(global);\n\n  if (focusMessageId) {\n    actions.focusMessage({\n      chatId,\n      threadId: threadId!,\n      messageId: focusMessageId,\n      tabId,\n    });\n  }\n\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    onError: () => {\n      global = getGlobal();\n      global = updateTabState(global, {\n        loadingThread: undefined,\n      }, tabId);\n      setGlobal(global);\n\n      actions.showNotification({\n        message: langProvider.translate('Group.ErrorAccessDenied'),\n        tabId,\n      });\n    },\n    onLoaded: () => {\n      global = getGlobal();\n      loadingThread = selectTabState(global, tabId).loadingThread;\n      if (loadingThread?.loadingChatId !== loadingChatId || loadingThread?.loadingMessageId !== loadingThreadId) {\n        return;\n      }\n\n      global = updateTabState(global, {\n        loadingThread: undefined,\n      }, tabId);\n      setGlobal(global);\n\n      actions.processOpenChatOrThread({\n        chatId,\n        type,\n        threadId: threadId!,\n        tabId,\n        isComments,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n      });\n    },\n  });\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload): Promise<void> => {\n  const { id, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId, tabId });\n  }\n});\n\naddActionHandler('openSupportChat', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true, tabId });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true, tabId });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true, tabId });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload): Promise<void> => {\n  const listType = payload.listType;\n  const { onReplace } = payload;\n  let { shouldReplace } = payload;\n  let i = 0;\n\n  const getOrderDate = (chat: ApiChat) => {\n    return selectChatLastMessage(global, chat.id)?.date || chat.creationDate;\n  };\n\n  while (shouldReplace || !global.chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n\n    if (global.connectionState !== 'connectionStateReady' || global.authState !== 'authorizationStateReady') {\n      return;\n    }\n\n    const listIds = !shouldReplace && global.chats.listIds[listType];\n    const oldestChat = listIds\n      ? listIds\n        /* eslint-disable @typescript-eslint/no-loop-func */\n        .map((id) => global.chats.byId[id])\n        .filter((chat) => (\n          Boolean(chat && getOrderDate(chat))\n          && chat.id !== SERVICE_NOTIFICATIONS_USER_ID\n          && !selectIsChatPinned(global, chat.id)\n        ))\n        /* eslint-enable @typescript-eslint/no-loop-func */\n        .sort((chat1, chat2) => getOrderDate(chat1)! - getOrderDate(chat2)!)[0]\n      : undefined;\n\n    await loadChats(\n      listType,\n      oldestChat?.id,\n      oldestChat ? getOrderDate(oldestChat) : undefined,\n      shouldReplace,\n      true,\n    );\n\n    if (shouldReplace) {\n      onReplace?.();\n      shouldReplace = false;\n    }\n\n    global = getGlobal();\n  }\n});\n\naddActionHandler('loadFullChat', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, force, tabId = getCurrentTabId(), withPhotos,\n  } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const loadChat = async () => {\n    await loadFullChat(global, actions, chat, tabId);\n    if (withPhotos) {\n      actions.loadProfilePhotos({ profileId: chatId });\n    }\n  };\n\n  if (force) {\n    void loadChat();\n  } else {\n    runDebouncedForLoadFullChat(loadChat);\n  }\n});\n\naddActionHandler('loadTopChats', (): ActionReturnType => {\n  runThrottledForLoadTopChats(() => {\n    loadChats('active');\n    loadChats('archived');\n  });\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('requestSavedDialogUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat,\n    isSavedDialog: true,\n    limit: 1,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addMessages(global, result.messages);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  if (result.messages.length) {\n    global = updateChatLastMessageId(global, chatId, result.messages[0].id, 'saved');\n    global = updateChatListIds(global, 'saved', [chatId]);\n\n    setGlobal(global);\n  } else {\n    global = removeChatFromChatLists(global, chatId, 'saved');\n\n    setGlobal(global);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      const currentMessageList = selectCurrentMessageList(global, tabId);\n      if (!currentMessageList) return;\n      const { chatId: tabChatId, threadId } = currentMessageList;\n\n      if (selectIsChatWithSelf(global, tabChatId) && threadId === chatId) {\n        actions.openChat({ id: undefined, tabId });\n      }\n    });\n  }\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, muteUntil = 0 } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const isMuted = payload.isMuted ?? muteUntil > 0;\n\n  global = updateChat(global, chatId, { isMuted });\n  setGlobal(global);\n  void callApi('updateChatMutedState', { chat, isMuted, muteUntil });\n});\n\naddActionHandler('updateTopicMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, muteUntil = 0 } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const isMuted = payload.isMuted ?? muteUntil > 0;\n\n  global = updateTopic(global, chatId, topicId, { isMuted });\n  setGlobal(global);\n  void callApi('updateTopicMutedState', {\n    chat, topicId, isMuted, muteUntil,\n  });\n});\n\naddActionHandler('createChannel', async (global, actions, payload): Promise<void> => {\n  const {\n    title, about, photo, memberIds, tabId = getCurrentTabId(),\n  } = payload;\n\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let createdChannel: ApiChat | undefined;\n  let restrictedUserIds: string[] | undefined;\n  try {\n    const result = await callApi('createChannel', { title, about, users });\n    createdChannel = result?.channel;\n    restrictedUserIds = result?.restrictedUserIds;\n  } catch (error) {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      chatCreation: {\n        progress: ChatCreationProgress.Error,\n      },\n    }, tabId);\n\n    setGlobal(global);\n\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = updateTabState(global, {\n    chatCreation: {\n      ...selectTabState(global, tabId).chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  }, tabId);\n  setGlobal(global);\n  actions.openChat({ id: channelId, shouldReplaceHistory: true, tabId });\n\n  if (restrictedUserIds) {\n    global = getGlobal();\n    global = addUsersToRestrictedInviteList(global, restrictedUserIds, channelId, tabId);\n    setGlobal(global);\n  }\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n});\n\naddActionHandler('joinChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (!(channelId && accessHash)) {\n    return;\n  }\n\n  try {\n    await callApi('joinChannel', { channelId, accessHash });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload): ActionReturnType => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChatUser', { chat, user });\n});\n\naddActionHandler('deleteChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    await callApi('leaveChannel', { channelId, accessHash });\n    global = getGlobal();\n    const chatMessages = selectChatMessages(global, chatId);\n    const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n    global = deleteChatMessages(global, chatId, localMessageIds);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('createGroupChat', async (global, actions, payload): Promise<void> => {\n  const {\n    title, memberIds, photo, tabId = getCurrentTabId(),\n  } = payload;\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let createdChatId: string | undefined;\n  try {\n    const { chat: createdChat, restrictedUserIds } = await callApi('createGroupChat', {\n      title,\n      users,\n    }) ?? {};\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n    createdChatId = chatId;\n\n    global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    }, tabId);\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      shouldReplaceHistory: true,\n      tabId,\n    });\n    if (restrictedUserIds) {\n      global = getGlobal();\n      global = addUsersToRestrictedInviteList(global, restrictedUserIds, chatId, tabId);\n      setGlobal(global);\n    }\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (err) {\n    if ((err as ApiError).message === 'USERS_TOO_FEW') {\n      global = getGlobal();\n      global = updateTabState(global, {\n        chatCreation: {\n          ...selectTabState(global, tabId).chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      }, tabId);\n      setGlobal(global);\n    } else if ((err as ApiError).message === 'USER_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n      global = addUsersToRestrictedInviteList(global, users.map(({ id }) => id), createdChatId!, tabId);\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload): ActionReturnType => {\n  const { id, folderId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'dialogFolderPinned');\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n\n    const ids = global.chats.orderedPinnedIds[listType === 'archived' ? 'archived' : 'active'];\n    if ((ids?.length || 0) >= limit && !isPinned) {\n      actions.openLimitReachedModal({\n        limit: 'dialogFolderPinned',\n        tabId,\n      });\n      return;\n    }\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('toggleSavedDialogPinned', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'savedDialogsPinned');\n\n  const isPinned = selectIsChatPinned(global, id, SAVED_FOLDER_ID);\n\n  const ids = global.chats.orderedPinnedIds.saved;\n  if ((ids?.length || 0) >= limit && !isPinned) {\n    actions.openLimitReachedModal({\n      limit: 'savedDialogsPinned',\n      tabId,\n    });\n    return;\n  }\n  void callApi('toggleSavedDialogPinned', { chat, shouldBePinned: !isPinned });\n});\n\naddActionHandler('loadChatFolders', async (global): Promise<void> => {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadRecommendedChatFolders', async (global): Promise<void> => {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editChatFolders', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, idsToRemove, idsToAdd, tabId = getCurrentTabId(),\n  } = payload;\n  const limit = selectCurrentLimit(global, 'dialogFiltersChats');\n\n  const isLimitReached = idsToAdd\n    .some((id) => selectChatFolder(global, id)!.includedChatIds.length >= limit);\n  if (isLimitReached) {\n    actions.openLimitReachedModal({ limit: 'dialogFiltersChats', tabId });\n    return;\n  }\n\n  idsToRemove.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  idsToAdd.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload): ActionReturnType => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddActionHandler('addChatFolder', async (global, actions, payload): Promise<void> => {\n  const { folder, tabId = getCurrentTabId() } = payload!;\n  const { orderedIds, byId } = global.chatFolders;\n\n  const limit = selectCurrentLimit(global, 'dialogFilters');\n  if (Object.keys(byId).length >= limit) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return;\n  }\n\n  const maxId = Math.max(...(orderedIds || []), ARCHIVED_FOLDER_ID);\n\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  const newId = maxId + 1;\n  const folderUpdate = {\n    id: newId,\n    ...newFolder,\n  };\n  await callApi('editChatFolder', {\n    id: newId,\n    folderUpdate,\n  });\n\n  // Update called from the above `callApi` is throttled, but we need to apply changes immediately\n  actions.apiUpdate({\n    '@type': 'updateChatFolder',\n    id: newId,\n    folder: folderUpdate,\n  });\n\n  actions.requestNextSettingsScreen({\n    foldersAction: {\n      type: 'setFolderId',\n      payload: maxId + 1,\n    },\n    tabId,\n  });\n\n  if (!description) {\n    return;\n  }\n\n  global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sortChatFolders', async (global, actions, payload): Promise<void> => {\n  const { folderIds } = payload!;\n\n  const result = await callApi('sortChatFolders', folderIds);\n  if (result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        orderedIds: folderIds,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatFolder', async (global, actions, payload): Promise<void> => {\n  const { id } = payload;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    await callApi('deleteChatFolder', id);\n  }\n});\n\naddActionHandler('toggleChatUnread', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddActionHandler('markTopicRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const lastTopicMessageId = chat.topics?.[topicId]?.lastMessageId;\n  if (!lastTopicMessageId) return;\n\n  void callApi('markMessageListRead', {\n    chat,\n    threadId: topicId,\n    maxId: lastTopicMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, {\n    unreadCount: 0,\n  });\n  global = updateThreadInfo(global, chatId, topicId, {\n    lastReadInboxMessageId: lastTopicMessageId,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatByInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n\n  const result = await callApi('openChatByInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.chatId, tabId });\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber, startAttach, attach, tabId = getCurrentTabId(),\n  } = payload!;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chat = await fetchChatByPhoneNumber(global, phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat({ tabId });\n    actions.showNotification({\n      message: langProvider.translate('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n      tabId,\n    });\n    return;\n  }\n\n  actions.openChat({ id: chat.id, tabId });\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n});\n\naddActionHandler('openTelegramLink', (global, actions, payload): ActionReturnType => {\n  const {\n    url,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (isDeepLink(url)) {\n    const isProcessed = processDeepLink(url);\n    if (isProcessed || url.match(RE_TG_LINK)) {\n      return;\n    }\n  }\n\n  const {\n    openChatByPhoneNumber,\n    openChatByInvite,\n    openStickerSet,\n    openChatWithDraft,\n    joinVoiceChatByLink,\n    showNotification,\n    focusMessage,\n    openInvoice,\n    processAttachBotParameters,\n    checkChatlistInvite,\n    openChatByUsername: openChatByUsernameAction,\n    openStoryViewerByUsername,\n    processBoostParameters,\n    checkGiftCode,\n  } = actions;\n\n  const uri = new URL(url.toLowerCase().startsWith('http') ? url : `https://${url}`);\n  if (TME_WEB_DOMAINS.has(uri.hostname) && uri.pathname === '/') {\n    window.open(uri.toString(), '_blank', 'noopener');\n    return;\n  }\n\n  const hostname = TME_WEB_DOMAINS.has(uri.hostname) ? 't.me' : uri.hostname;\n  const hostParts = hostname.split('.');\n  if (hostParts.length > 3) return;\n  const pathname = hostParts.length === 3 ? `${hostParts[0]}/${uri.pathname}` : uri.pathname;\n  const [part1, part2, part3] = pathname.split('/').filter(Boolean).map((part) => decodeURI(part));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const hasStartAttach = params.hasOwnProperty('startattach');\n  const hasStartApp = params.hasOwnProperty('startapp');\n  const choose = parseChooseParameter(params.choose);\n  const storyId = part2 === 's' && (Number(part3) || undefined);\n  const hasBoost = params.hasOwnProperty('boost');\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach: params.startattach,\n      attach: params.attach,\n      tabId,\n    });\n    return;\n  }\n\n  if (storyId) {\n    openStoryViewerByUsername({\n      username: part1,\n      storyId,\n      tabId,\n    });\n\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    openChatByInvite({ hash, tabId });\n    return;\n  }\n\n  if (part1 === 'addstickers' || part1 === 'addemoji') {\n    openStickerSet({\n      stickerSetInfo: {\n        shortName: part2,\n      },\n      tabId,\n    });\n    return;\n  }\n\n  if (part1 === 'share') {\n    const text = formatShareText(params.url, params.text);\n    openChatWithDraft({ text, tabId });\n    return;\n  }\n\n  if (part1 === 'addlist') {\n    const slug = part2;\n    checkChatlistInvite({ slug, tabId });\n    return;\n  }\n\n  if (part1 === 'giftcode') {\n    const slug = part2;\n    checkGiftCode({ slug, tabId });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n      tabId,\n    });\n  } else if (part1 === 'boost') {\n    const username = part2;\n    const id = params.c;\n\n    const isPrivate = !username && Boolean(id);\n\n    processBoostParameters({\n      usernameOrId: username || id,\n      isPrivate,\n      tabId,\n    });\n  } else if (hasBoost) {\n    const isPrivate = part1 === 'c' && Boolean(chatOrChannelPostId);\n    processBoostParameters({\n      usernameOrId: chatOrChannelPostId || part1,\n      isPrivate,\n      tabId,\n    });\n  } else if (part1 === 'c' && chatOrChannelPostId && messageId) {\n    const chatId = toChannelId(chatOrChannelPostId);\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      showNotification({ message: 'Chat does not exist', tabId });\n      return;\n    }\n\n    if (messageId) {\n      focusMessage({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n    }\n  } else if (part1.startsWith('$')) {\n    openInvoice({\n      slug: part1.substring(1),\n      tabId,\n    });\n  } else if (part1 === 'invoice') {\n    openInvoice({\n      slug: part2,\n      tabId,\n    });\n  } else if ((hasStartAttach && choose) || (!part2 && hasStartApp)) {\n    processAttachBotParameters({\n      username: part1,\n      filter: choose,\n      startParam: params.startattach || params.startapp,\n      tabId,\n    });\n  } else {\n    openChatByUsernameAction({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      threadId: messageId ? Number(chatOrChannelPostId) : undefined,\n      commentId,\n      startParam: params.start,\n      startAttach: params.startattach,\n      attach: params.attach,\n      startApp: params.startapp,\n      originalParts: [part1, part2, part3],\n      tabId,\n    });\n  }\n});\n\naddActionHandler('processBoostParameters', async (global, actions, payload): Promise<void> => {\n  const { usernameOrId, isPrivate, tabId = getCurrentTabId() } = payload;\n\n  let chat: ApiChat | undefined;\n\n  if (isPrivate) {\n    const chatId = toChannelId(usernameOrId);\n    chat = selectChat(global, chatId);\n    if (!chat) {\n      actions.showNotification({ message: 'Chat does not exist', tabId });\n      return;\n    }\n  } else {\n    chat = await fetchChatByUsername(global, usernameOrId);\n    if (!chat) {\n      actions.showNotification({ message: 'User does not exist', tabId });\n      return;\n    }\n  }\n\n  if (!isChatChannel(chat)) {\n    actions.openChat({ id: chat.id, tabId });\n    return;\n  }\n\n  actions.openBoostModal({\n    chatId: chat.id,\n    tabId,\n  });\n});\n\naddActionHandler('acceptInviteConfirmation', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id, tabId });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach, threadId, originalParts, startApp,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  const webAppName = originalParts?.[1];\n  const isWebApp = webAppName && !Number(webAppName) && !originalParts?.[2];\n\n  if (!commentId) {\n    if (startAttach === undefined && messageId && !startParam\n      && chat?.usernames?.some((c) => c.username === username)) {\n      actions.focusMessage({\n        chatId: chat.id, threadId, messageId, tabId,\n      });\n      return;\n    }\n    if (!isWebApp) {\n      await openChatByUsername(\n        global, actions, username, threadId, messageId, startParam, startAttach, attach, tabId,\n      );\n      return;\n    }\n  }\n\n  const usernameChat = selectChatByUsername(global, username);\n  if (commentId && messageId && usernameChat) {\n    actions.openThread({\n      isComments: true,\n      originChannelId: usernameChat.id,\n      originMessageId: messageId,\n      tabId,\n      focusMessageId: commentId,\n    });\n    return;\n  }\n\n  if (!isWebApp) actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chatByUsername = await fetchChatByUsername(global, username);\n\n  if (!chatByUsername) return;\n\n  if (isWebApp && chatByUsername) {\n    const theme = extractCurrentThemeParams();\n\n    actions.requestAppWebView({\n      appName: webAppName,\n      botId: chatByUsername.id,\n      tabId,\n      startApp,\n      theme,\n    });\n    return;\n  }\n\n  if (!messageId) return;\n\n  actions.openThread({\n    isComments: true,\n    originChannelId: chatByUsername.id,\n    originMessageId: messageId,\n    tabId,\n    focusMessageId: commentId,\n  });\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isEnabled,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: isEnabled });\n  setGlobal(global);\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload): ActionReturnType => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, bannedRights,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  global = getGlobal();\n\n  const updatedFullInfo = selectChatFullInfo(global, chat.id);\n  if (!updatedFullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = updatedFullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  global = updateChatFullInfo(global, chat.id, {\n    ...(members && isBanned && {\n      members: members.filter((m) => m.userId !== userId),\n    }),\n    ...(members && !isBanned && {\n      members: members.map((m) => (\n        m.userId === userId\n          ? { ...m, bannedRights }\n          : m\n      )),\n    }),\n    ...(isUnblocked && kickedMembers && {\n      kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n    }),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, adminRights, customTitle,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembersById } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n  let newAdminMembersById: Record<string, ApiChatMember> | undefined;\n  if (adminMembersById) {\n    if (isDismissed) {\n      const { [userId]: remove, ...rest } = adminMembersById;\n      newAdminMembersById = rest;\n    } else {\n      newAdminMembersById = {\n        ...adminMembersById,\n        [userId]: {\n          ...adminMembersById[userId],\n          adminRights,\n          customTitle,\n        },\n      };\n    }\n  }\n\n  if (newAdminMembersById) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { adminMembersById: newAdminMembersById });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('updateChat', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, about, photo, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    fullInfo?.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (photo) {\n    actions.loadFullChat({ chatId, tabId, withPhotos: true });\n  }\n});\n\naddActionHandler('updateChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  global = updateChat(global, chatId, { avatarHash: undefined });\n  global = updateChatFullInfo(global, chatId, { profilePhoto: undefined });\n  setGlobal(global);\n  // This method creates a new entry in photos array\n  await callApi('editChatPhoto', {\n    chatId,\n    accessHash: chat.accessHash,\n    photo,\n  });\n  // Explicitly delete the old photo reference\n  await callApi('deleteProfilePhotos', [photo]);\n  actions.loadFullChat({ chatId, tabId, withPhotos: true });\n});\n\naddActionHandler('deleteChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const photosToDelete = [photo];\n  if (chat.avatarHash === photo.id) {\n    // Select next photo to set as avatar\n    const nextPhoto = chat.photos?.[1];\n    if (nextPhoto) {\n      photosToDelete.push(nextPhoto);\n    }\n    global = updateChat(global, chatId, { avatarHash: undefined });\n    global = updateChatFullInfo(global, chatId, { profilePhoto: undefined });\n    setGlobal(global);\n    // Set next photo as avatar\n    await callApi('editChatPhoto', {\n      chatId,\n      accessHash: chat.accessHash,\n      photo: nextPhoto,\n    });\n  }\n\n  const { photos = [] } = chat;\n\n  const newPhotos = photos.filter((p) => photosToDelete.some((toDelete) => toDelete.id !== p.id));\n  global = getGlobal();\n  global = updateChat(global, chatId, { photos: newPhotos });\n\n  setGlobal(global);\n\n  // Delete references to the old photos\n  const result = await callApi('deleteProfilePhotos', photosToDelete);\n  if (!result) return;\n  actions.loadFullChat({ chatId, tabId, withPhotos: true });\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global): Promise<void> => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group && !group.isForum) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = addChats(global, addedById);\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, chatId, tabId = getCurrentTabId() } = payload || {};\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  let fullInfo = selectChatFullInfo(global, chat.id);\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo!.isPreHistoryHidden) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: false });\n    setGlobal(global);\n\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, tabId = getCurrentTabId() } = payload;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const fullInfo = selectChatFullInfo(global, channelId);\n  let chat: ApiChat | undefined;\n  if (fullInfo?.linkedChatId) {\n    chat = selectChat(global, fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    global = getGlobal();\n    loadFullChat(global, actions, chat, tabId);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload): ActionReturnType => {\n  const { activeChatFolder, tabId = getCurrentTabId() } = payload;\n  const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n  const isBlocked = activeChatFolder + 1 > maxFolders;\n\n  if (isBlocked) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    activeChatFolder,\n  }, tabId);\n});\n\naddActionHandler('resetOpenChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    requestedDraft: undefined,\n  }, tabId);\n});\n\naddActionHandler('loadMoreMembers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat || isChatBasicGroup(chat)) {\n    return;\n  }\n\n  const offset = selectChatFullInfo(global, chat.id)?.members?.length;\n  if (offset !== undefined && chat.membersCount !== undefined && offset >= chat.membersCount) return;\n\n  const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n  if (!result) {\n    return;\n  }\n\n  const { members, users, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload): Promise<void> => {\n  const { chatId, memberIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as string[]).map((userId) => selectUser(global, userId)).filter(Boolean);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Loading, tabId });\n  const restrictedUserIds = await callApi('addChatMembers', chat, users);\n  if (restrictedUserIds) {\n    global = getGlobal();\n    global = addUsersToRestrictedInviteList(global, restrictedUserIds, chat.id, tabId);\n    setGlobal(global);\n  }\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed, tabId });\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload): Promise<void> => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload): ActionReturnType => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, enabledReactions, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n  });\n\n  global = getGlobal();\n  void loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('fetchChat', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    return;\n  }\n\n  if (selectIsChatWithSelf(global, chatId)) {\n    void callApi('fetchChat', { type: 'self' });\n  } else {\n    const user = selectUser(global, chatId);\n    if (user) {\n      void callApi('fetchChat', { type: 'user', user });\n    }\n  }\n});\n\naddActionHandler('loadChatSettings', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchChatSettings', chat);\n  if (!result) return;\n  const { settings, users } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateChat(global, chat.id, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('toggleJoinToSend', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinToSend', chat, isEnabled);\n});\n\naddActionHandler('toggleJoinRequest', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinRequest', chat, isEnabled);\n});\n\naddActionHandler('openForumPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  actions.toggleStoryRibbon({ isShown: false, tabId });\n  actions.toggleStoryRibbon({ isShown: false, isArchived: true, tabId });\n  return updateTabState(global, {\n    forumPanelChatId: chatId,\n  }, tabId);\n});\n\naddActionHandler('closeForumPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forumPanelChatId: undefined,\n  }, tabId);\n});\n\naddActionHandler('processAttachBotParameters', async (global, actions, payload): Promise<void> => {\n  const {\n    username, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n  if (!bot) return;\n\n  const isForChat = Boolean(filter);\n\n  if (!isForChat) {\n    actions.callAttachBot({\n      isFromSideMenu: true,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  const { attachMenu: { bots } } = global;\n  if (!bots[bot.id]) {\n    global = updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'requestAttachBotInChat',\n          payload: {\n            bot,\n            filter,\n            startParam,\n          },\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  actions.requestAttachBotInChat({\n    bot,\n    filter,\n    startParam,\n    tabId,\n  });\n});\n\naddActionHandler('loadTopics', async (global, actions, payload): Promise<void> => {\n  const { chatId, force } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (!force && chat.listedTopicIds && chat.listedTopicIds.length === chat.topicsCount) {\n    return;\n  }\n\n  const offsetTopic = !force && chat.listedTopicIds ? chat.listedTopicIds.reduce((acc, el) => {\n    const topic = chat.topics?.[el];\n    const accTopic = chat.topics?.[acc];\n    if (!topic) return acc;\n    if (!accTopic || topic.lastMessageId < accTopic.lastMessageId) {\n      return el;\n    }\n    return acc;\n  }) : undefined;\n\n  const { id: offsetTopicId, date: offsetDate, lastMessageId: offsetId } = (offsetTopic\n    && chat.topics?.[offsetTopic]) || {};\n  const result = await callApi('fetchTopics', {\n    chat, offsetTopicId, offsetId, offsetDate, limit: offsetTopicId ? TOPICS_SLICE : TOPICS_SLICE_SECOND_LOAD,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopics(global, chatId, result.count, result.topics);\n  global = updateListedTopicIds(global, chatId, result.topics.map((topic) => topic.id));\n  Object.entries(result.draftsById || {}).forEach(([threadId, draft]) => {\n    global = replaceThreadParam(global, chatId, Number(threadId), 'draft', draft);\n  });\n  Object.entries(result.readInboxMessageIdByTopicId || {}).forEach(([topicId, messageId]) => {\n    global = updateThreadInfo(global, chatId, Number(topicId), { lastReadInboxMessageId: messageId });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadTopicById', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchTopicById', { chat, topicId });\n\n  if (!result) {\n    if ('tabId' in payload && payload.shouldCloseChatOnError) {\n      const { tabId = getCurrentTabId() } = payload;\n      actions.openChat({ id: undefined, tabId });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopic(global, chatId, topicId, result.topic);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleForum', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled, tabId = getCurrentTabId() } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  let result: true | undefined;\n  try {\n    result = await callApi('toggleForum', { chat, isEnabled });\n  } catch (error) {\n    if ((error as ApiError).message.startsWith('A wait of')) {\n      actions.showNotification({ message: langProvider.translate('FloodWait'), tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (result) {\n    global = getGlobal();\n    global = updateChat(global, chat.id, { isForum: isEnabled });\n    setGlobal(global);\n\n    if (!isEnabled) {\n      actions.closeForumPanel({ tabId });\n    } else {\n      actions.openForumPanel({ chatId: chat.id, tabId });\n    }\n  }\n});\n\naddActionHandler('toggleParticipantsHidden', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const prevIsEnabled = selectChatFullInfo(global, chat.id)?.areParticipantsHidden;\n  global = updateChatFullInfo(global, chatId, { areParticipantsHidden: isEnabled });\n  setGlobal(global);\n\n  const result = await callApi('toggleParticipantsHidden', { chat, isEnabled });\n\n  if (!result && prevIsEnabled !== undefined) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chatId, { areParticipantsHidden: prevIsEnabled });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('createTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, iconColor, iconEmojiId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (selectTabState(global, tabId).createTopicPanel) {\n    global = updateTabState(global, {\n      createTopicPanel: {\n        chatId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const topicId = await callApi('createTopic', {\n    chat, title, iconColor, iconEmojiId,\n  });\n  if (topicId) {\n    actions.openThread({\n      chatId, threadId: topicId, shouldReplaceHistory: true, tabId,\n    });\n  }\n  actions.closeCreateTopicPanel({ tabId });\n});\n\naddActionHandler('deleteTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('deleteTopic', { chat, topicId });\n\n  global = getGlobal();\n  global = deleteTopic(global, chatId, topicId);\n  setGlobal(global);\n});\n\naddActionHandler('editTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, topicId, tabId = getCurrentTabId(), ...rest\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const topic = chat?.topics?.[topicId];\n  if (!chat || !topic) return;\n\n  if (selectTabState(global, tabId).editTopicPanel) {\n    global = updateTabState(global, {\n      editTopicPanel: {\n        chatId,\n        topicId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('editTopic', { chat, topicId, ...rest });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, rest);\n  setGlobal(global);\n\n  actions.closeEditTopicPanel({ tabId });\n});\n\naddActionHandler('toggleTopicPinned', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, topicId, isPinned, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { topicsPinnedLimit } = global.appConfig || {};\n  const chat = selectChat(global, chatId);\n  if (!chat || !chat.topics || !topicsPinnedLimit) return;\n\n  if (isPinned && Object.values(chat.topics).filter((topic) => topic.isPinned).length >= topicsPinnedLimit) {\n    actions.showNotification({\n      message: langProvider.translate('LimitReachedPinnedTopics', topicsPinnedLimit, 'i'),\n      tabId,\n    });\n    return;\n  }\n\n  void callApi('togglePinnedTopic', { chat, topicId, isPinned });\n});\n\naddActionHandler('checkChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkChatlistInvite', { slug });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('lng_group_invite_bad_link'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  global = updateTabState(global, {\n    chatlistModal: {\n      invite: result.invite,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('joinChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { invite, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const peers = peerIds.map((peerId) => selectChat(global, peerId)).filter(Boolean);\n  const notJoinedCount = peers.filter((peer) => peer.isNotJoined).length;\n\n  const folder = 'folderId' in invite ? selectChatFolder(global, invite.folderId) : undefined;\n  const folderTitle = 'title' in invite ? invite.title : folder?.title;\n\n  try {\n    const result = await callApi('joinChatlistInvite', { slug: invite.slug, peers });\n    if (!result) return;\n\n    actions.showNotification({\n      title: langProvider.translate(folder ? 'FolderLinkUpdatedTitle' : 'FolderLinkAddedTitle', folderTitle),\n      message: langProvider.translate('FolderLinkAddedSubtitle', notJoinedCount, 'i'),\n      tabId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHATLISTS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'chatlistJoined', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('leaveChatlist', async (global, actions, payload): Promise<void> => {\n  const { folderId, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n\n  const peers = peerIds?.map((peerId) => selectChat(global, peerId)).filter(Boolean) || [];\n\n  const result = await callApi('leaveChatlist', { folderId, peers });\n\n  if (!result) return;\n\n  actions.showNotification({\n    title: langProvider.translate('FolderLinkDeletedTitle', folder.title),\n    message: langProvider.translate('FolderLinkDeletedSubtitle', peers.length, 'i'),\n    tabId,\n  });\n});\n\naddActionHandler('loadChatlistInvites', async (global, actions, payload): Promise<void> => {\n  const { folderId } = payload;\n\n  const result = await callApi('fetchChatlistInvites', { folderId });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: result.invites,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('createChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let result: { filter: ApiChatFolder; invite: ApiChatlistExportedInvite | undefined } | undefined;\n\n  try {\n    result = await callApi('createChalistInvite', {\n      folderId,\n      peers: folder.includedChatIds.concat(folder.pinnedChatIds || [])\n        .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean),\n    });\n  } catch (error) {\n    if (CHATLIST_LIMIT_ERROR_LIST.has((error as ApiError).message)) {\n      actions.openLimitReachedModal({ limit: 'chatlistInvites', tabId });\n      actions.requestNextSettingsScreen({ screen: SettingsScreens.Folders, tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!result || !result.invite) return;\n\n  const { shareFolderScreen } = selectTabState(global, tabId);\n\n  if (!shareFolderScreen) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      byId: {\n        ...global.chatFolders.byId,\n        [folderId]: {\n          ...global.chatFolders.byId[folderId],\n          ...result.filter,\n        },\n      },\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: [\n          ...(global.chatFolders.invites[folderId] || []),\n          result.invite,\n        ],\n      },\n    },\n  };\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...shareFolderScreen,\n      url: result.invite.url,\n      isLoading: false,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    folderId, peerIds, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const slug = url.split('/').pop();\n  if (!slug) return;\n\n  const peers = peerIds\n    .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean);\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const result = await callApi('editChatlistInvite', { folderId, slug, peers });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        invites: {\n          ...global.chatFolders.invites,\n          [folderId]: global.chatFolders.invites[folderId]?.map((invite) => {\n            if (invite.url === url) {\n              return result;\n            }\n            return invite;\n          }),\n        },\n      },\n    };\n    setGlobal(global);\n  } catch (error) {\n    actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n  } finally {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      shareFolderScreen: {\n        ...selectTabState(global, tabId).shareFolderScreen!,\n        isLoading: false,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, url } = payload;\n\n  const slug = url.split('/').pop();\n\n  if (!slug) return;\n\n  const result = await callApi('deleteChatlistInvite', { folderId, slug });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: global.chatFolders.invites[folderId]?.filter((invite) => invite.url !== url),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openDeleteChatFolderModal', async (global, actions, payload): Promise<void> => {\n  const { folderId, isConfirmedForChatlist, tabId = getCurrentTabId() } = payload;\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  if (folder.isChatList && (!folder.hasMyInvites || isConfirmedForChatlist)) {\n    const suggestions = await callApi('fetchLeaveChatlistSuggestions', { folderId });\n    global = getGlobal();\n    global = updateTabState(global, {\n      chatlistModal: {\n        removal: {\n          folderId,\n          suggestedPeerIds: suggestions,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    deleteFolderDialogModal: folderId,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateChatDetectedLanguage', (global, actions, payload): ActionReturnType => {\n  const { chatId, detectedLanguage } = payload;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    detectedLanguage,\n  });\n\n  return global;\n});\n\naddActionHandler('togglePeerTranslations', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('togglePeerTranslations', { chat, isEnabled });\n\n  if (result === undefined) return;\n\n  global = getGlobal();\n  global = updatePeerFullInfo(global, chatId, {\n    isTranslationDisabled: isEnabled ? undefined : true,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('setViewForumAsMessages', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat?.isForum || chat.isForumAsMessages === isEnabled) {\n    return;\n  }\n\n  global = updateChat(global, chatId, { isForumAsMessages: isEnabled || undefined });\n  setGlobal(global);\n\n  void callApi('setViewForumAsMessages', { chat, isEnabled });\n});\n\naddActionHandler('fetchChannelRecommendations', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  const { similarChannels, count } = await callApi('fetchChannelRecommendations', {\n    chat,\n  }) || {};\n\n  if (!similarChannels) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addChats(global, buildCollectionByKey(similarChannels, 'id'));\n  global = addSimilarChannels(global, chatId, similarChannels.map((channel) => channel.id), count);\n  setGlobal(global);\n});\n\naddActionHandler('toggleChannelRecommendations', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  global = toggleSimilarChannels(global, chatId);\n  setGlobal(global);\n});\n\nasync function loadChats(\n  listType: ChatListType,\n  offsetId?: string,\n  offsetDate?: number,\n  shouldReplace = false,\n  isFullDraftSync?: boolean,\n) {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal();\n  let lastLocalServiceMessageId = selectLastServiceNotification(global)?.id;\n  const result = listType === 'saved' ? await callApi('fetchSavedChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    withPinned: shouldReplace,\n  }) : await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: shouldReplace,\n    lastLocalServiceMessageId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  global = getGlobal();\n  lastLocalServiceMessageId = selectLastServiceNotification(global)?.id;\n\n  if (shouldReplace) {\n    if (listType === 'active') {\n      // Always include service notifications chat\n      if (!chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n        const result2 = await callApi('fetchChat', {\n          type: 'user',\n          user: SERVICE_NOTIFICATIONS_USER_MOCK,\n        });\n\n        global = getGlobal();\n\n        const notificationsChat = result2 && selectChat(global, result2.chatId);\n        if (notificationsChat) {\n          chatIds.unshift(notificationsChat.id);\n          result.chats.unshift(notificationsChat);\n          if (lastLocalServiceMessageId) {\n            result.lastMessageByChatId[notificationsChat.id] = lastLocalServiceMessageId;\n          }\n        }\n      }\n\n      const tabStates = Object.values(global.byTabId);\n      const visibleChats = tabStates.flatMap(({ id: tabId }) => {\n        const currentChat = selectCurrentChat(global, tabId);\n        return currentChat ? [currentChat] : [];\n      });\n\n      const visibleUsers = tabStates.flatMap(({ id: tabId }) => {\n        return selectVisibleUsers(global, tabId) || [];\n      });\n\n      if (global.currentUserId && global.users.byId[global.currentUserId]) {\n        visibleUsers.push(global.users.byId[global.currentUserId]);\n      }\n\n      global = replaceUsers(global, buildCollectionByKey(visibleUsers.concat(result.users), 'id'));\n      global = replaceUserStatuses(global, result.userStatusesById);\n      global = replaceChats(global, buildCollectionByKey(visibleChats.concat(result.chats), 'id'));\n      global = replaceChatListIds(global, listType, chatIds);\n    } else {\n      // Archived and Saved\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addUserStatuses(global, result.userStatusesById);\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = replaceChatListIds(global, listType, chatIds);\n    }\n  } else {\n    const newChats = buildCollectionByKey(result.chats, 'id');\n\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, newChats);\n    global = updateChatListIds(global, listType, chatIds);\n  }\n\n  global = updateChatListSecondaryInfo(global, listType, result);\n  global = addMessages(global, result.messages);\n  global = updateChatsLastMessageId(global, result.lastMessageByChatId, listType);\n\n  const idsToUpdateDraft = isFullDraftSync ? result.chatIds : Object.keys(result.draftsById);\n  idsToUpdateDraft.forEach((chatId) => {\n    const draft = result.draftsById[chatId];\n    const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n\n    if (!draft && !thread) return;\n\n    if (!selectDraft(global, chatId, MAIN_THREAD_ID)?.isLocal) {\n      global = replaceThreadParam(\n        global, chatId, MAIN_THREAD_ID, 'draft', draft,\n      );\n    }\n  });\n\n  if ((chatIds.length === 0 || chatIds.length === result.totalChatCount) && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nexport async function loadFullChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    users, userStatusesById, fullInfo, groupCall, membersCount, isForumAsMessages,\n  } = result;\n\n  global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState', 'isLoaded']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  if (membersCount !== undefined) {\n    global = updateChat(global, chat.id, { membersCount });\n  }\n  if (chat.isForum) {\n    global = updateChat(global, chat.id, { isForumAsMessages });\n  }\n  global = replaceChatFullInfo(global, chat.id, fullInfo);\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  const localSet = stickerSet && selectStickerSet(global, stickerSet);\n  if (stickerSet && !localSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: stickerSet.id,\n        accessHash: stickerSet.accessHash,\n      },\n      tabId,\n    });\n  }\n\n  return result;\n}\n\nexport async function migrateChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiChat | undefined> {\n  try {\n    const supergroup = await callApi('migrateChat', chat);\n\n    return supergroup;\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n\n    return undefined;\n  }\n}\n\nexport async function fetchChatByUsername<T extends GlobalState>(\n  global: T,\n  username: string,\n) {\n  global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const { chat, user } = await callApi('getChatByUsername', username) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n\n  setGlobal(global);\n\n  return chat;\n}\n\nexport async function fetchChatByPhoneNumber<T extends GlobalState>(global: T, phoneNumber: string) {\n  global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const { chat, user } = await callApi('getChatByPhoneNumber', phoneNumber) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n  setGlobal(global);\n\n  return chat;\n}\n\nasync function getAttachBotOrNotify<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, username: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) return undefined;\n\n  global = getGlobal();\n  const user = selectUser(global, chat.id);\n  if (!user) return undefined;\n\n  const isBot = isUserBot(user);\n  if (!isBot) return undefined;\n  const result = await callApi('loadAttachBot', {\n    bot: user,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('WebApp.AddToAttachmentUnavailableError'),\n      tabId,\n    });\n\n    return undefined;\n  }\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.bot;\n}\n\nasync function openChatByUsername<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  username: string,\n  threadId?: ThreadId,\n  channelPostId?: number,\n  startParam?: string,\n  startAttach?: string,\n  attach?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const currentChat = selectCurrentChat(global, tabId);\n\n  // Attach in the current chat\n  if (startAttach !== undefined && !attach) {\n    const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n\n    if (!currentChat || !bot) return;\n\n    actions.callAttachBot({\n      bot,\n      chatId: currentChat.id,\n      startParam: startAttach,\n      tabId,\n    });\n\n    return;\n  }\n\n  const isCurrentChat = currentChat?.usernames?.some((c) => c.username === username);\n\n  if (!isCurrentChat) {\n    // Open temporary empty chat to make the click response feel faster\n    actions.openChat({ id: TMP_CHAT_ID, tabId });\n  }\n\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) {\n    if (!isCurrentChat) {\n      actions.openPreviousChat({ tabId });\n      actions.showNotification({ message: 'User does not exist', tabId });\n    }\n\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({\n      chatId: chat.id, threadId, messageId: channelPostId, tabId,\n    });\n  } else if (!isCurrentChat) {\n    actions.openThread({ chatId: chat.id, threadId: threadId ?? MAIN_THREAD_ID, tabId });\n  }\n\n  if (startParam) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n}\n\nasync function openAttachMenuFromLink<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  attach: string,\n  startAttach?: string | boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const bot = await getAttachBotOrNotify(global, actions, attach, tabId);\n  if (!bot) return;\n\n  actions.callAttachBot({\n    bot,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    tabId,\n  });\n}\n\nexport async function ensureIsSuperGroup<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !isChatBasicGroup(chat)) {\n    return chat;\n  }\n\n  const newChat = await migrateChat(global, actions, chat, tabId);\n  if (!newChat) {\n    return undefined;\n  }\n\n  actions.loadFullChat({ chatId: newChat.id, tabId });\n  actions.openChat({ id: newChat.id, tabId });\n\n  return newChat;\n}\n","import type { ApiGroupCall } from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, CallSound, GlobalState, TabArgs,\n} from '../../types';\n\nimport { requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { callApi } from '../../../api/gramjs';\nimport { getMainUsername } from '../../helpers';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { addChats, addUsers } from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectChatFullInfo, selectTabState, selectUser,\n} from '../../selectors';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestNextMutation(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nasync function fetchGroupCallParticipants<T extends GlobalState>(\n  global: T,\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  const result = await callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload): Promise<void> => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(global, groupCall);\n    global = getGlobal();\n    await fetchGroupCallParticipants(global, groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let inviteLink = selectChatFullInfo(global, chat.id)?.inviteLink;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: 'Link copied to clipboard',\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.translate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat, tabId);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) {\n    actions.showNotification({\n      message: \"Sorry, your browser doesn't support group calls\",\n      tabId,\n    });\n    return;\n  }\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall && groupCall.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash) && chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (!chat) return;\n\n    await loadFullChat(global, actions, chat, tabId);\n    global = getGlobal();\n    groupCall = selectChatGroupCall(global, chatId);\n  } else if (!groupCall && id && accessHash) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void fetchGroupCallParticipants(global, groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', (global, actions, payload): ActionReturnType => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.translate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          stream.getTracks().forEach((track) => track.stop());\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.translate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      } else {\n        stream.getTracks().forEach((track) => track.stop());\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n","import type { ApiGroupCall } from '../../api/types';\nimport type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\n\nimport { omit } from '../../util/iteratees';\nimport { selectChat } from '../selectors';\nimport { selectGroupCall } from '../selectors/calls';\nimport { updateChatFullInfo } from './chats';\n\nexport function updateGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): T {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter(({ isLeft }) => !isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChatFullInfo(global, groupCall.chatId, {\n        groupCallId: undefined,\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): T {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n"],"names":["memo","withGlobal","global","userId","chat","selectCurrentChat","user","selectUser","contactName","getUserFirstOrLastName","undefined","DeleteMemberModal","isOpen","onClose","deleteChatMember","getActions","lang","useLang","handleDeleteChatMember","useCallback","chatId","id","React","createElement","ConfirmDialog","title","textParts","renderText","confirmLabel","confirmHandler","confirmIsDestructive","SERVICE_NOTIFICATIONS_USER_MOCK","SERVICE_NOTIFICATIONS_USER_ID","accessHash","type","isMin","phoneNumber","CHATLIST_LIMIT_ERROR_LIST","Set","runThrottledForLoadTopChats","throttle","cb","runDebouncedForLoadFullChat","debounce","abortChatRequests","threadId","callApi","abortChatRequestsForCurrentChat","newChatId","newThreadId","tabId","getCurrentTabId","currentMessageList","selectCurrentMessageList","currentChatId","currentThreadId","isChatOpened","isThreadOpened","Object","values","byTabId","reduce","accHasChatOpened","accHasThreadOpened","otherTabId","otherMessageList","isSameChat","async","loadChats","listType","offsetId","offsetDate","shouldReplace","isFullDraftSync","getGlobal","lastLocalServiceMessageId","selectLastServiceNotification","result","limit","CHAT_LIST_LOAD_SLICE","withPinned","archived","chatIds","length","shift","includes","result2","notificationsChat","selectChat","unshift","chats","lastMessageByChatId","tabStates","visibleChats","flatMap","currentChat","visibleUsers","selectVisibleUsers","currentUserId","users","byId","push","replaceUsers","buildCollectionByKey","concat","replaceUserStatuses","userStatusesById","replaceChats","replaceChatListIds","addUsers","addUserStatuses","updateChats","newChats","updateChatListIds","updateChatListSecondaryInfo","addMessages","messages","updateChatsLastMessageId","keys","draftsById","forEach","draft","thread","selectThread","MAIN_THREAD_ID","selectDraft","isLocal","replaceThreadParam","totalChatCount","isFullyLoaded","setGlobal","loadFullChat","actions","fullInfo","groupCall","membersCount","isForumAsMessages","existingGroupCall","selectGroupCall","updateGroupCall","omit","participantsCount","updateChat","isForum","replaceChatFullInfo","stickerSet","localSet","selectStickerSet","loadStickers","stickerSetInfo","fetchChatByUsername","username","localChat","selectChatByUsername","updateUser","getAttachBotOrNotify","isUserBot","bot","showNotification","message","langProvider","openAttachMenuFromLink","attach","startAttach","callAttachBot","startParam","ensureIsSuperGroup","isChatBasicGroup","newChat","error","openLimitReachedModal","showDialog","data","hasErrorKey","migrateChat","openChat","addActionHandler","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","currentChatIds","map","filter","Boolean","folderAllOrderedIds","getOrderedIds","ALL_FOLDER_ID","nextChatId","find","has","add","loadViewportMessages","payload","noForumTopicPanel","shouldReplaceHistory","shouldReplaceLast","processOpenChatOrThread","hasUnreadMark","toggleChatUnread","isChatOnlySummary","selectChatLastMessageId","requestChatUpdate","selectIsChatWithSelf","closeStoryViewer","otherParams","openThread","isComments","focusMessageId","loadingChatId","loadingThreadId","originChannelId","originMessageId","originalChat","getIsSavedDialog","threadInfo","selectThreadInfo","listedIds","Number","updateTabState","loadingThread","selectTabState","loadingMessageId","openPreviousChat","currentGlobal","messageId","addChats","updateThreadInfo","isCommentsInfo","fromChannelId","fromMessageId","pick","updateThread","firstMessageId","focusMessage","onError","onLoaded","chatFullInfo","linkedChatId","selectSupportChat","TMP_CHAT_ID","onReplace","getOrderDate","selectChatLastMessage","date","creationDate","DEBUG","console","connectionState","authState","listIds","oldestChat","selectIsChatPinned","sort","chat1","chat2","force","withPhotos","loadChat","loadProfilePhotos","profileId","lastLocalMessage","isSavedDialog","updateChatLastMessageId","removeChatFromChatLists","tabChatId","muteUntil","isMuted","topicId","updateTopic","about","photo","memberIds","createdChannel","restrictedUserIds","chatCreation","progress","ChatCreationProgress","InProgress","channel","Error","channelId","Complete","addUsersToRestrictedInviteList","leaveChat","chatMessages","selectChatMessages","localMessageIds","isLocalMessageId","deleteChatMessages","createdChatId","createdChat","err","folderId","selectCurrentLimit","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","ids","orderedPinnedIds","isChatArchived","SAVED_FOLDER_ID","saved","chatFolders","recommendedChatFolders","recommended","idsToRemove","idsToAdd","some","includedId","emoticon","orderedIds","maxId","Math","max","recommendedId","description","newFolder","newId","apiUpdate","requestNextSettingsScreen","foldersAction","folderIds","unreadCount","lastTopicMessageId","topics","lastMessageId","lastReadInboxMessageId","hash","localUser","selectUserByPhoneNumber","fetchChatByPhoneNumber","replace","url","isDeepLink","processDeepLink","match","RE_TG_LINK","openChatByPhoneNumber","openChatByInvite","openStickerSet","openChatWithDraft","joinVoiceChatByLink","openInvoice","processAttachBotParameters","checkChatlistInvite","openChatByUsername","openChatByUsernameAction","openStoryViewerByUsername","processBoostParameters","checkGiftCode","uri","URL","toLowerCase","startsWith","TME_WEB_DOMAINS","hostname","pathname","window","open","toString","hostParts","split","part1","part2","part3","part","decodeURI","params","fromEntries","searchParams","hasStartAttach","hasOwnProperty","hasStartApp","choose","parseChooseParameter","storyId","hasBoost","substr","startattach","shortName","text","formatShareText","slug","chatOrChannelPostId","commentId","comment","inviteHash","voicechat","livestream","c","usernameOrId","isPrivate","toChannelId","substring","startapp","start","startApp","originalParts","isChatChannel","openBoostModal","webAppName","isWebApp","usernames","channelPostId","isCurrentChat","startBot","botId","param","usernameChat","chatByUsername","theme","extractCurrentThemeParams","requestAppWebView","appName","isEnabled","updateChatFullInfo","isPreHistoryHidden","bannedRights","updatedFullInfo","selectChatFullInfo","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","chatAfterUpdate","adminMembersById","isDismissed","newAdminMembersById","remove","rest","updateManagementProgress","ManagementProgress","Promise","all","avatarHash","profilePhoto","photosToDelete","nextPhoto","photos","newPhotos","p","toDelete","groups","addedById","group","forDiscussionIds","fullChat","activeChatFolder","requestedDraft","offset","addChatMembers","setNewChatMembersDialogState","newChatMembersProgress","NewChatMembersProgress","Loading","Closed","isProtected","enabledReactions","settings","isChatSuperGroup","toggleStoryRibbon","isShown","isArchived","forumPanelChatId","isFromSideMenu","attachMenu","bots","requestedAttachBotInstall","onConfirm","action","requestAttachBotInChat","listedTopicIds","topicsCount","offsetTopic","acc","el","topic","accTopic","offsetTopicId","TOPICS_SLICE","TOPICS_SLICE_SECOND_LOAD","updateTopics","count","updateListedTopicIds","entries","readInboxMessageIdByTopicId","shouldCloseChatOnError","openForumPanel","closeForumPanel","prevIsEnabled","areParticipantsHidden","iconColor","iconEmojiId","createTopicPanel","isLoading","closeCreateTopicPanel","deleteTopic","editTopicPanel","closeEditTopicPanel","topicsPinnedLimit","appConfig","chatlistModal","invite","peerIds","peers","peerId","notJoinedCount","peer","isNotJoined","folderTitle","invites","shareFolderScreen","screen","SettingsScreens","Folders","pop","isConfirmedForChatlist","isChatList","hasMyInvites","suggestions","removal","suggestedPeerIds","deleteFolderDialogModal","detectedLanguage","updatePeerFullInfo","isTranslationDisabled","similarChannels","addSimilarChannels","toggleSimilarChannels","silentSound","audioElement","audioContext","sounds","initializeSoundsForSafari","initializeSounds","sound","prevSrc","src","muted","volume","play","then","currentTime","requestNextMutation","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","fetchGroupCall","call","isLoaded","fetchGroupCallParticipants","nextOffset","isCallPanelVisible","subscribed","requestMasterAndJoinGroupCall","selectActiveGroupCall","hasPublicUsername","getMainUsername","inviteLink","canSelfUnmute","copyTextToClipboard","full","requestMasterAndCallAction","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","AudioContext","webkitAudioContext","srcObject","silence","safePlay","createAudioElement","checkNavigatorUserMediaPermissions","groupCalls","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","isVideo","state","participantId","adminId","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","assign","stream","getAudioTracks","enabled","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","navigator","mediaDevices","getUserMedia","video","getVideoTracks","getTracks","track","stop","checkMicrophonePermission","catch","audio","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","removeGroupCall","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount"],"sourceRoot":""}