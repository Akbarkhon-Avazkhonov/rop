{"version":3,"file":"3041.09757e1c29bd09d6696c.js","mappings":"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","sources":["webpack://telegram-t/./src/components/auth/AuthCode.tsx","webpack://telegram-t/./src/components/auth/AuthPassword.tsx","webpack://telegram-t/./src/components/auth/AuthRegister.tsx","webpack://telegram-t/./src/components/common/PasswordForm.tsx","webpack://telegram-t/./src/hooks/useLayoutEffectWithPrevDeps.ts","webpack://telegram-t/./src/hooks/useTimeout.ts","webpack://telegram-t/./src/util/directInputManager.ts","webpack://telegram-t/./src/util/stopEvent.ts","webpack://telegram-t/./src/util/trapFocus.ts"],"sourcesContent":["import type { FormEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\n\nimport TrackingMonkey from '../common/TrackingMonkey';\nimport InputText from '../ui/InputText';\nimport Loading from '../ui/Loading';\n\ntype StateProps = Pick<GlobalState, 'authPhoneNumber' | 'authIsCodeViaApp' | 'authIsLoading' | 'authError'>;\n\nconst CODE_LENGTH = 5;\n\nconst AuthCode: FC<StateProps> = ({\n  authPhoneNumber,\n  authIsCodeViaApp,\n  authIsLoading,\n  authError,\n}) => {\n  const {\n    setAuthCode,\n    returnToAuthPhoneNumber,\n    clearAuthError,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [code, setCode] = useState<string>('');\n  const [isTracking, setIsTracking] = useState(false);\n  const [trackingDirection, setTrackingDirection] = useState(1);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      inputRef.current!.focus();\n    }\n  }, []);\n\n  useHistoryBack({\n    isActive: true,\n    onBack: returnToAuthPhoneNumber,\n  });\n\n  const onCodeChange = useCallback((e: FormEvent<HTMLInputElement>) => {\n    if (authError) {\n      clearAuthError();\n    }\n\n    const { currentTarget: target } = e;\n    target.value = target.value.replace(/[^\\d]+/, '').substr(0, CODE_LENGTH);\n\n    if (target.value === code) {\n      return;\n    }\n\n    setCode(target.value);\n\n    if (!isTracking) {\n      setIsTracking(true);\n    } else if (!target.value.length) {\n      setIsTracking(false);\n    }\n\n    if (code && code.length > target.value.length) {\n      setTrackingDirection(-1);\n    } else {\n      setTrackingDirection(1);\n    }\n\n    if (target.value.length === CODE_LENGTH) {\n      setAuthCode({ code: target.value });\n    }\n  }, [authError, clearAuthError, code, isTracking, setAuthCode]);\n\n  function handleReturnToAuthPhoneNumber() {\n    returnToAuthPhoneNumber();\n  }\n\n  return (\n    <div id=\"auth-code-form\" className=\"custom-scroll\">\n      <div className=\"auth-form\">\n\n        <h1>\n          {authPhoneNumber}\n          <div\n            className=\"auth-number-edit div-button\"\n            onClick={handleReturnToAuthPhoneNumber}\n            role=\"button\"\n            tabIndex={0}\n            title={lang('WrongNumber')}\n            aria-label={lang('WrongNumber')}\n          >\n            <i className=\"icon icon-edit\" />\n          </div>\n        </h1>\n        <InputText\n          ref={inputRef}\n          id=\"sign-in-code\"\n          label={lang('Code')}\n          onInput={onCodeChange}\n          value={code}\n          error={authError && lang(authError)}\n          autoComplete=\"off\"\n          inputMode=\"numeric\"\n        />\n        {authIsLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['authPhoneNumber', 'authIsCodeViaApp', 'authIsLoading', 'authError']),\n)(AuthCode));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\n\nimport useLang from '../../hooks/useLang';\n\nimport PasswordForm from '../common/PasswordForm';\nimport MonkeyPassword from '../common/PasswordMonkey';\n\ntype StateProps = Pick<GlobalState, 'authIsLoading' | 'authError' | 'authHint'>;\n\nconst AuthPassword: FC<StateProps> = ({\n  authIsLoading, authError, authHint,\n}) => {\n  const { setAuthPassword, clearAuthError } = getActions();\n\n  const lang = useLang();\n  const [showPassword, setShowPassword] = useState(false);\n\n  const handleChangePasswordVisibility = useCallback((isVisible) => {\n    setShowPassword(isVisible);\n  }, []);\n\n  const handleSubmit = useCallback((password: string) => {\n    setAuthPassword({ password });\n  }, [setAuthPassword]);\n\n  return (\n    <div id=\"auth-password-form\" className=\"custom-scroll\">\n      <div className=\"auth-form\">\n       \n        <h1>{lang('Login.Header.Password')}</h1>\n        <p className=\"note\">{lang('Login.EnterPasswordDescription')}</p>\n        <PasswordForm\n          clearError={clearAuthError}\n          error={authError && lang(authError)}\n          hint={authHint}\n          isLoading={authIsLoading}\n          isPasswordVisible={showPassword}\n          onChangePasswordVisibility={handleChangePasswordVisibility}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['authIsLoading', 'authError', 'authHint']),\n)(AuthPassword));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\n\nimport useLang from '../../hooks/useLang';\n\nimport AvatarEditable from '../ui/AvatarEditable';\nimport Button from '../ui/Button';\nimport InputText from '../ui/InputText';\n\ntype StateProps = Pick<GlobalState, 'authIsLoading' | 'authError'>;\n\nconst AuthRegister: FC<StateProps> = ({\n  authIsLoading, authError,\n}) => {\n  const { signUp, clearAuthError, uploadProfilePhoto } = getActions();\n\n  const lang = useLang();\n  const [isButtonShown, setIsButtonShown] = useState(false);\n  const [croppedFile, setCroppedFile] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n\n  const handleFirstNameChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    if (authError) {\n      clearAuthError();\n    }\n\n    const { target } = event;\n\n    setFirstName(target.value);\n    setIsButtonShown(target.value.length > 0);\n  }, [authError, clearAuthError]);\n\n  const handleLastNameChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    const { target } = event;\n\n    setLastName(target.value);\n  }, []);\n\n  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    signUp({ firstName, lastName });\n\n    if (croppedFile) {\n      uploadProfilePhoto({ file: croppedFile });\n    }\n  }\n\n  return (\n    <div id=\"auth-registration-form\" className=\"custom-scroll\">\n      <div className=\"auth-form\">\n        <form action=\"\" method=\"post\" onSubmit={handleSubmit}>\n          <AvatarEditable onChange={setCroppedFile} />\n          <h2>{lang('YourName')}</h2>\n          <p className=\"note\">{lang('Login.Register.Desc')}</p>\n          <InputText\n            id=\"registration-first-name\"\n            label={lang('Login.Register.FirstName.Placeholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={authError && lang(authError)}\n            autoComplete=\"given-name\"\n          />\n          <InputText\n            id=\"registration-last-name\"\n            label={lang('Login.Register.LastName.Placeholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n            autoComplete=\"family-name\"\n          />\n          {isButtonShown && (\n            <Button type=\"submit\" ripple isLoading={authIsLoading}>{lang('Next')}</Button>\n          )}\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['authIsLoading', 'authError']),\n)(AuthRegister));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { MIN_PASSWORD_LENGTH } from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLang from '../../hooks/useLang';\nimport useTimeout from '../../hooks/useTimeout';\n\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  submitLabel?: string;\n  error?: string;\n  hint?: string;\n  placeholder?: string;\n  description?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  shouldShowSubmit?: boolean;\n  shouldResetValue?: boolean;\n  isPasswordVisible?: boolean;\n  clearError: NoneToVoidFunction;\n  noRipple?: boolean;\n  onChangePasswordVisibility: (state: boolean) => void;\n  onInputChange?: (password: string) => void;\n  onSubmit?: (password: string) => void;\n};\n\nconst PasswordForm: FC<OwnProps> = ({\n  isLoading = false,\n  isPasswordVisible,\n  error,\n  hint,\n  placeholder = 'Password',\n  submitLabel = 'Next',\n  description,\n  shouldShowSubmit,\n  shouldResetValue,\n  shouldDisablePasswordManager = false,\n  noRipple = false,\n  clearError,\n  onChangePasswordVisibility,\n  onInputChange,\n  onSubmit,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [password, setPassword] = useState('');\n  const [canSubmit, setCanSubmit] = useState(false);\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n\n  useEffect(() => {\n    if (shouldResetValue) {\n      setPassword('');\n    }\n  }, [shouldResetValue]);\n\n  useTimeout(() => {\n    if (!IS_TOUCH_ENV) {\n      inputRef.current!.focus();\n    }\n  }, focusDelayTimeoutMs);\n\n  useEffect(() => {\n    if (error) {\n      requestMutation(() => {\n        inputRef.current!.focus();\n        inputRef.current!.select();\n      });\n    }\n  }, [error]);\n\n  function onPasswordChange(e: ChangeEvent<HTMLInputElement>) {\n    if (error) {\n      clearError();\n    }\n\n    const { target } = e;\n    setPassword(target.value);\n    setCanSubmit(target.value.length >= MIN_PASSWORD_LENGTH);\n    if (onInputChange) {\n      onInputChange(target.value);\n    }\n  }\n\n  function togglePasswordVisibility() {\n    onChangePasswordVisibility(!isPasswordVisible);\n  }\n\n  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    if (isLoading) {\n      return;\n    }\n\n    if (canSubmit) {\n      onSubmit!(password);\n    }\n  }\n\n  function renderFakeInput() {\n    return (\n      <input\n        type=\"password\"\n        id=\"prevent_autofill\"\n        autoComplete=\"off\"\n        className=\"visually-hidden\"\n        tabIndex={-2}\n      />\n    );\n  }\n\n  return (\n    <form action=\"\" onSubmit={onSubmit ? handleSubmit : stopEvent} autoComplete=\"off\">\n      <div\n        className={buildClassName('input-group password-input', password && 'touched', error && 'error')}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldDisablePasswordManager && renderFakeInput()}\n        <input\n          ref={inputRef}\n          className=\"form-control\"\n          type={isPasswordVisible ? 'text' : 'password'}\n          id=\"sign-in-password\"\n          value={password || ''}\n          autoComplete={shouldDisablePasswordManager ? 'one-time-code' : 'current-password'}\n          onChange={onPasswordChange}\n          maxLength={256}\n          dir=\"auto\"\n        />\n        <label>{error || hint || placeholder}</label>\n        <div\n          className=\"div-button toggle-password\"\n          onClick={togglePasswordVisibility}\n          role=\"button\"\n          tabIndex={0}\n          title=\"Toggle password visibility\"\n          aria-label=\"Toggle password visibility\"\n        >\n          <i className={buildClassName('icon', isPasswordVisible ? 'icon-eye' : 'icon-eye-closed')} />\n        </div>\n      </div>\n      {description && <p className=\"description\">{description}</p>}\n      {onSubmit && (canSubmit || shouldShowSubmit) && (\n        <Button type=\"submit\" ripple={!noRipple} isLoading={isLoading} disabled={!canSubmit}>\n          {submitLabel}\n        </Button>\n      )}\n    </form>\n  );\n};\n\nexport default memo(PasswordForm);\n","import { useLayoutEffect, useRef } from '../lib/teact/teact';\n\nconst useLayoutEffectWithPrevDeps = <const T extends readonly any[]>(\n  cb: (args: T | readonly []) => void, dependencies: T, debugKey?: string,\n) => {\n  const prevDepsRef = useRef<T>();\n\n  return useLayoutEffect(() => {\n    const prevDeps = prevDepsRef.current;\n    prevDepsRef.current = dependencies;\n\n    return cb(prevDeps || []);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, dependencies, debugKey);\n};\n\nexport default useLayoutEffectWithPrevDeps;\n","import { useEffect } from '../lib/teact/teact';\n\nimport useLastCallback from './useLastCallback';\n\nfunction useTimeout(callback: () => void, delay?: number, dependencies: readonly any[] = []) {\n  const savedCallback = useLastCallback(callback);\n\n  useEffect(() => {\n    if (typeof delay !== 'number') {\n      return undefined;\n    }\n\n    const id = setTimeout(() => savedCallback(), delay);\n    return () => clearTimeout(id);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [delay, savedCallback, ...dependencies]);\n}\n\nexport default useTimeout;\n","let counter = 0;\n\nexport function disableDirectTextInput() {\n  counter += 1;\n}\n\nexport function enableDirectTextInput() {\n  counter -= 1;\n}\n\nexport function getIsDirectTextInputDisabled() {\n  return counter > 0;\n}\n","import type React from '../lib/teact/teact';\n\nconst stopEvent = (e: React.UIEvent | Event | React.FormEvent) => {\n  e.stopPropagation();\n  e.preventDefault();\n};\n\nexport default stopEvent;\n","export default function trapFocus(element: HTMLElement) {\n  function handleKeyDown(e: KeyboardEvent) {\n    if (e.key !== 'Tab') {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n\n    const focusableElements = Array.from(\n      element.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'),\n    ) as HTMLElement[];\n    if (!focusableElements.length) {\n      return;\n    }\n\n    const currentFocusedIndex = focusableElements.findIndex((em) => em.isSameNode(document.activeElement));\n    let newFocusedIndex = 0;\n    if (currentFocusedIndex >= 0) {\n      if (e.shiftKey) {\n        newFocusedIndex = currentFocusedIndex > 0\n          ? currentFocusedIndex - 1\n          : focusableElements.length - 1;\n      } else {\n        newFocusedIndex = currentFocusedIndex < focusableElements.length - 1\n          ? currentFocusedIndex + 1\n          : 0;\n      }\n    }\n\n    focusableElements[newFocusedIndex].focus();\n  }\n\n  document.addEventListener('keydown', handleKeyDown, false);\n\n  return () => {\n    document.removeEventListener('keydown', handleKeyDown, false);\n  };\n}\n"],"names":["memo","withGlobal","global","pick","AuthCode","authPhoneNumber","authIsCodeViaApp","authIsLoading","authError","setAuthCode","returnToAuthPhoneNumber","clearAuthError","getActions","lang","useLang","inputRef","useRef","code","setCode","useState","isTracking","setIsTracking","trackingDirection","setTrackingDirection","useEffect","IS_TOUCH_ENV","current","focus","useHistoryBack","isActive","onBack","onCodeChange","useCallback","e","currentTarget","target","value","replace","substr","length","React","createElement","id","className","onClick","role","tabIndex","title","InputText","ref","label","onInput","error","autoComplete","inputMode","Loading","AuthPassword","authHint","setAuthPassword","showPassword","setShowPassword","handleChangePasswordVisibility","isVisible","handleSubmit","password","PasswordForm","clearError","hint","isLoading","isPasswordVisible","onChangePasswordVisibility","onSubmit","AuthRegister","signUp","uploadProfilePhoto","isButtonShown","setIsButtonShown","croppedFile","setCroppedFile","firstName","setFirstName","lastName","setLastName","handleFirstNameChange","event","handleLastNameChange","action","method","preventDefault","file","AvatarEditable","onChange","Button","type","ripple","placeholder","submitLabel","description","shouldShowSubmit","shouldResetValue","shouldDisablePasswordManager","noRipple","onInputChange","isMobile","useAppLayout","setPassword","canSubmit","setCanSubmit","focusDelayTimeoutMs","useTimeout","requestMutation","select","stopEvent","buildClassName","dir","isRtl","undefined","MIN_PASSWORD_LENGTH","maxLength","disabled","useLayoutEffectWithPrevDeps","cb","dependencies","debugKey","prevDepsRef","useLayoutEffect","prevDeps","callback","delay","savedCallback","useLastCallback","setTimeout","clearTimeout","counter","disableDirectTextInput","enableDirectTextInput","getIsDirectTextInputDisabled","stopPropagation","trapFocus","element","handleKeyDown","key","focusableElements","Array","from","querySelectorAll","currentFocusedIndex","findIndex","em","isSameNode","document","activeElement","newFocusedIndex","shiftKey","addEventListener","removeEventListener"],"sourceRoot":""}